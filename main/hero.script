-- Player logic
go.property("max_camera_offset", vmath.vector3(100, 200, 0))
go.property("camera_offset_lerp", 0.05)
go.property("crosshair", true)

local camera = require "orthographic.camera"

local CAMERA_ID = hash("/camera")

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- max speed right/left
local SPEED = 150

-- pre-hashing ids improves performance
local ENEMY = hash("enemy")

local SPRITE_HERO = "visuals#hero"

local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

local ANIM_RUN = hash("run")
local ANIM_IDLE = hash("idle")
local ANIM_HIT = hash("hit")
-- 

function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	self.input = {}
	self.camera_offset = vmath.vector3()
	-- spawn position
	self.spawn_position = go.get_position()
	-- player velocity
	self.dir = vmath.vector3()
	-- which direction the player is facing
	self.direction = nil
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if anim ~= self.anim then
		msg.post(SPRITE_HERO, "play_animation", { id = anim }) 
		self.anim = anim                               -- [5]
	end
end

local function update_animations(self)
	-- make sure the right animation is playing
	if self.input[UP] == true or self.input[DOWN] == true or self.input[RIGHT] == true or self.input[LEFT] == true then
		play_animation(self, ANIM_RUN)
	else
		play_animation(self, ANIM_IDLE)
	end
end

function update(self, dt)

	-- rotate towards cursor
	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		
		-- local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		-- local rotation = vmath.quat_rotation_z(angle)
		-- msg.post(SPRITE_HERO, "play_animation", { id = anim }) 
		sprite.set_hflip(SPRITE_HERO,  player_world.x > crosshair_world.x)
	end
		
	-- move player
	local pos = go.get_position()
-- 

	if self.input[UP] then
		pos.y = pos.y + SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, self.max_camera_offset.x)
	elseif self.input[DOWN] then
		pos.y = pos.y - SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, -self.max_camera_offset.x)
	end
	if self.input[LEFT] then
		pos.x = pos.x - SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, -self.max_camera_offset.y)
	elseif self.input[RIGHT] then
		pos.x = pos.x + SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, self.max_camera_offset.y)
	end
	

	
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	msg.post(CAMERA_ID, camera.MSG_FOLLOW_OFFSET, { offset = self.camera_offset})
	
	-- reset volatile state
	-- self.dir = vmath.vector3()
end


function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == CONTACT_POINT_RESPONSE then
		-- check that the object is something we consider an obstacle
		if message.group == GROUND then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == RESPAWMN or message.group == ENEMY then
			go.set_position(self.spawn_position)
		end
	end
end


function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end
	end

	
	-- if action_id == DOWN then                        -- [1]
	-- 	self.dir.y = -1
	-- elseif action_id == UP then
	-- 	self.dir.y = 1
	-- elseif action_id == LEFT then                     -- [2]
	-- 	self.dir.x = -1
	-- elseif action_id == RIGHT then
	-- 	self.dir.x = 1
	-- end
	
end