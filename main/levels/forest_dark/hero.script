-- Player logic
go.property("max_camera_offset", vmath.vector3(10, 20, 0))
go.property("camera_offset_lerp", 0.05)
go.property("crosshair", true)
local camera = require "orthographic.camera"

local NORMAL_THRESHOLD = 0.7
local SWORD_ID = hash("/sword")
local SWORD_ID = hash("/sword")

local DAMAGE_TAKEN = hash("damage_taken")
local CAMERA_ID = hash("/camera")
local ATTACK = hash("attack")

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- max speed right/left
local SPEED = 100
local EDGE = hash("edge")

-- pre-hashing ids improves performance
local ENEMY = hash("enemy")

local COIN = hash("coin")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")


local SPRITE_HERO = "#hero"
local SPRITE_SWORD = "/sword#sword"
local SPRITE_BOW = "/bow#sprite"

local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

local ANIM_RUN = hash("run")
local ANIM_IDLE = hash("idle")
local ANIM_HIT = hash("hit")
-- 


local hit_easing = { 0, 1, 1, 1, 1, 1, 1, 0, 0 }
local custom_easing = vmath.vector(hit_easing)

function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	self.input = {}
	self.camera_offset = vmath.vector3()
	-- spawn position
	self.spawn_position = go.get_position()
	-- player velocity
	self.dir = vmath.vector3()
	-- child here weapon
	self.has_child = true 
	self.active_weapon = "bow"
	-- which direction the player is facing
	self.direction = nil
	self.health = 100
	self.correction = vmath.vector3()
	self.tint_animation = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if anim ~= self.anim then
		msg.post(SPRITE_HERO, "play_animation", { id = anim }) 
		self.anim = anim                               -- [5]
	end
end

local function handle_damage_event(self,direction)
	self.health = self.health - 10
	if self.health == 0 then
		
		msg.post("loader:/go#loader", "end_game")
	end
	local to = go.get_position() + (direction * 15)
	-- checks if knockback final position has any edges along the way using raycasting
	-- to prevent falling out of the map
	result = physics.raycast(go.get_position(), to, { hash("edge") })
	if not result then
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD,to, go.EASING_INOUTQUAD, 0.2)
	end
	
	msg.post("level2:/hud#hud", "health_update",{health = self.health})
	camera.shake(CAMERA_ID, 0.004, 0.25,hash("both"));
	if not self.tint_animation then
		self.tint_animation = true
		go.animate("hero#hero", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 0, 0, 4), custom_easing, .3,0,function() 
			self.tint_animation = false
		end)
	end
end

local function update_animations(self)
	-- make sure the right animation is playing
	if self.input[UP] == true or self.input[DOWN] == true or self.input[RIGHT] == true or self.input[LEFT] == true then
		play_animation(self, ANIM_RUN)
	else
		play_animation(self, ANIM_IDLE)
	end
end

function update(self, dt)
	self.correction = vmath.vector3()
	-- rotate towards cursor
	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		-- local sword_position = player_world.y +10
		
		local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		local rotation = vmath.quat_rotation_z(angle)
		
		-- msg.post(SPRITE_HERO, "play_animation", { id = anim }) 
		sprite.set_hflip(SPRITE_HERO,  player_world.x > crosshair_world.x)
		if self.active_weapon == "sword" then
			sprite.set_hflip(SPRITE_BOW,  player_world.x > crosshair_world.x)
			sprite.set_vflip(SPRITE_BOW,  player_world.x > crosshair_world.x)
		end
		
		go.set(self.active_weapon, "rotation", rotation)

		-- go.set("sword", "position", sword_position)
		-- msg.post(SWORD_ID, "set_rotation",{id = rotation_i})
	end
		
	-- move player
	local pos = go.get_position()
-- 

	if self.input[UP] then
		pos.y = pos.y + SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, self.max_camera_offset.x)
	elseif self.input[DOWN] then
		pos.y = pos.y - SPEED * dt
		self.camera_offset.y = vmath.lerp(self.camera_offset_lerp, self.camera_offset.y, -self.max_camera_offset.x)
	end
	if self.input[LEFT] then
		pos.x = pos.x - SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, -self.max_camera_offset.y)
	elseif self.input[RIGHT] then
		pos.x = pos.x + SPEED * dt
		self.camera_offset.x = vmath.lerp(self.camera_offset_lerp, self.camera_offset.x, self.max_camera_offset.y)
	end
	

	
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	msg.post(CAMERA_ID, camera.MSG_FOLLOW_OFFSET, { offset = self.camera_offset})
	
	-- reset volatile state
	-- self.dir = vmath.vector3()
end


-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
-- local function handle_obstacle_contact(self, normal, distance)
-- 
-- end


function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == CONTACT_POINT_RESPONSE then
		-- check that the object is something we consider an obstacle
		if message.group == EDGE then
			-- Block player if he is touching the edge
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
				local proj = vmath.project(self.correction, message.normal * message.distance)
	
				if proj < 1 then
					-- Only care for projections that does not overshoot.
					local comp = (message.distance - message.distance * proj) * message.normal
					-- Apply compensation
					go.set_position(go.get_position() + comp)
					-- Accumulate correction done
					self.correction = self.correction + comp
				end
			end
		elseif message.group == COIN then
			msg.post("level2:/hud#hud", "current_coins",{coins = 1})
			go.delete(message.other_id)
		elseif message.group == RESPAWMN then
			go.set_position(self.spawn_position)
		end
	end
	if message_id == DAMAGE_TAKEN then
		handle_damage_event(self,message.direction)
	end
end


local function attack(self)
	if self.active_weapon == "bow" then
		local direction = go.get_rotation("bow") 
		local offset = vmath.rotate(direction, vmath.vector3(0, 50, 0))
		local og_offset = vmath.rotate(direction, vmath.vector3(0,5,0))
		local id = factory.create("#factory",go.get_position())
		go.set_position(go.get_position() + og_offset, id)
		go.set_rotation(direction,id)
		go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, go.get_position() + offset, go.EASING_LINEAR, 0.4,0,function()
			go.delete(id)
		end
	)
	else
		-- implement sword attack
	end 

end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end
	end
	if action_id == ATTACK then
		if action.released then
			attack(self)
		end
	end

	
	-- if action_id == DOWN then                        -- [1]
	-- 	self.dir.y = -1
	-- elseif action_id == UP then
	-- 	self.dir.y = 1
	-- elseif action_id == LEFT then                     -- [2]
	-- 	self.dir.x = -1
	-- elseif action_id == RIGHT then
	-- 	self.dir.x = 1
	-- end
	
end