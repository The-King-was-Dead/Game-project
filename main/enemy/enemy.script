local COLLISION_RESPONSE = hash("collision_response")
local TRIGGER_RESPONSE = hash("trigger_response")
local HITBOX = hash("Hitbox")
local PLAYER = hash("player")
local SPRITE = hash("sprite")
local ENEMY = hash("enemy")
local EDGE = hash("edge")


go.property("speed", 20)
go.property("health", 100)
go.property("attack_rate", 2)

local hit_easing = { 0, 1, 1, 1, 1, 1, 1, 0, 0 }
local custom_easing = vmath.vector(hit_easing)

function init(self)
	self.anim = nil
	self.contact = false
	self.dead = false
	self.fliph = false;
	self.isAttacking = false;
	self.currentDistanceFromEnemy = 0;
	self.lastDistanceFromEnemy = 0;
	self.tint_animation = false
	msg.post("#Hitbox", "disable")
	self.correction = vmath.vector3()
	print(self.speed)
	
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		if anim == "attack" then
			sprite.play_flipbook("#sprite", anim,nil, {offset = 0,playback_rate = self.attack_rate})
		else
			sprite.play_flipbook("#sprite", anim)
		end
		-- remember which animation is playing
		self.anim = anim
	end
end

local function handle_player_contact(self)
	self.contact = true
	self.isAttacking = true
end



local function angle_to(id)
	local my_pos = go.get_position()
	local other_pos = go.get_position(id)
	return -math.atan2(other_pos.x - my_pos.x, other_pos.y - my_pos.y)
end

local function handle_damage_event(self)
	player_pos = go.get_position("hero")
	current_pos = go.get_position()
	direction = vmath.normalize(player_pos - current_pos)
	msg.post("hero#script", "damage_taken",{direction = direction})
end

local function checkFrame(self,anim,frame)
	if(self.anim == anim) then
		cursor = go.get("#sprite", "cursor")

		if(cursor > frame and cursor < frame+0.05) then
			msg.post("#Hitbox", "enable")
		else
			msg.post("#Hitbox", "disable")
		end
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update_animations(self)
	if(self.isAttacking == true) then
		checkFrame(self, "attack", 4/7)
	end
end

function doAttack(self)
	if self.isAttacking == true then
		play_animation(self,"attack")
	end
end

function update(self, dt)
	self.correction = vmath.vector3()
	update_animations(self)
	doAttack(self)
	local player_pos = go.get_position("hero")
	current_pos = go.get_position()
	direction = vmath.normalize(player_pos - current_pos)
	new_pos = current_pos + direction * self.speed * dt
	sprite.set_hflip("#sprite", current_pos.x > player_pos.x)
	physics.set_hflip("#Hitbox", current_pos.x > player_pos.x)
	if self.contact == false then
		if direction.x > 0 or direction.x < 0 then
			play_animation(self, "walk")
			go.set_position(new_pos)
			self.lastDistanceFromEnemy = vmath.length(player_pos - current_pos)
		end
	else if self.contact == true then
		self.currentDistanceFromEnemy = vmath.length(player_pos - current_pos)
		if math.abs(self.currentDistanceFromEnemy-self.lastDistanceFromEnemy) > 7 then
			self.contact = false
			self.isAttacking = false
		end		
	end
end
end

	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

local function handle_enemy_damage(self)
	if not self.tint_animation then
		self.tint_animation = true
		go.animate("#sprite", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 0, 0, 4), custom_easing, .3,0,function() 
			self.tint_animation = false
		end)
	end
	self.health = self.health - 50
	msg.post("main:/sounds#enemyHit", "play_sound")
	print(self.health)
	if self.health == 0 then
		msg.post("level#forest", "kill_enemy")
		pos = go.get_position()
		factory.create("#factory",pos)
		go.delete(".")
	end
end 

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if message.group == hash("player") and not self.contact then
			handle_player_contact(self)
		end
		if message.group == hash("bullet") then
			go.delete(message.other_id)
			handle_enemy_damage(self)
		end
	end
	if message_id == hash("contact_point_response") then
		if message.group == ENEMY or message.group == PLAYER or message.group == EDGE then
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
					local proj = vmath.project(self.correction, message.normal * message.distance)

					if proj < 1 then
						-- Only care for projections that does not overshoot.
						local comp = (message.distance - message.distance * proj) * message.normal
						-- Apply compensation
						go.set_position(go.get_position() + comp)
						-- Accumulate correction done
						self.correction = self.correction + comp
					end
				end
			end
		end
	if message_id == TRIGGER_RESPONSE and sender.fragment == HITBOX then
		if message.enter then
			handle_damage_event(self)
		else if message.exit and not self.contact then
			self.isAttacking = false
			self.contact = false
		end
	end
end
end
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
