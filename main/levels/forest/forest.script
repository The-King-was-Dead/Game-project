-- local BACKGROUND_COLOR = vmath.vector4(252/255, 223/255, 205/255, 255/255)
-- local BACKGROUND_COLOR = vmath.vector4(72/255, 159/255, 181/255, 255/255)
local defsave = require("defsave.defsave")

local BACKGROUND_COLOR = vmath.vector4(130/255, 192/255, 204/255, 255/255)
local timeline = 
{
	{
		spawned = false,
		count = 3,
		time = 4,
		difficulty = 0.4,
		attack_rate = 2,
		spawn_rate = 1
	},
	{
		spawned = false,
		count = 5,
		time = 60,
		difficulty = 0.6,
		attack_rate = 3,
		spawn_rate = 2,
	},
	{
		spawned = false,
		count = 10,
		time = 90,
		difficulty = 0.8,
		attack_rate = 4,
		spawn_rate = 2
	}
}

function init(self)
	-- msg.post("@render:", "use_fixed_projection", { zoom = 3, near = -10, far = 10 })
	defos.set_cursor_visible(false)
	msg.post("@render:", "clear_color", { color = BACKGROUND_COLOR })
	self.enemies= {}
	self.max_speed = 100
	self.wave = 0
	self.enemies_count = 0
	self.enemy_spawners = {}
	self.start_time = socket.gettime()
	self.ended = false
	self.waves = 0
	self.light_pos = go.get_world_position("/light")
	msg.post("light#collisionobject", "disable")
	for k, v in pairs(timeline) do
		self.waves = self.waves + 1
	end
end

function update(self,dt)
	time_elapsed = socket.gettime() - self.start_time

	for key,value in pairs(timeline) do
		
		if timeline[key].spawned == false and (time_elapsed >= timeline[key].time or self.enemies_count == 0) then
			start_enemy_spawner(self,timeline[key].count,timeline[key].difficulty,timeline[key].attack_rate,timeline[key].spawn_rate)
			timeline[key].spawned = true
		end
	end 
	
	if self.ended == false and self.enemies_count == 0 and self.wave == self.waves then
		self.ended = true
		msg.post("/hud/hud#hud", "round_update",{wave = "LEVEL COMPLETED"})
		defsave.set("player", "level", defsave.get("player", "level") + 1)
		-- msg.post("level1:/light", message_id)
		self.light_pos = vmath.vector3(self.light_pos.x, self.light_pos.y, 1)
		go.set_position(self.light_pos, "/light")
		msg.post("light#collisionobject", "enable")
	end
end

function start_enemy_spawner(self,enemies,difficulty,attack_rate,spawn_rate)
	msg.post("/hud/hud#hud", "round_update",{wave = string.format("WAVE %d", self.wave + 1)})
	self.wave = self.wave + 1
	self.enemies_count = enemies
		enemy_count = 0
		local delay = 1 / spawn_rate
		local timer_handle = timer.delay(delay, true, function(self,handle)
			local position = self.enemy_spawners[math.random(1, #self.enemy_spawners)]
			if enemy_count < enemies then
				create_enemy(self, position,difficulty,attack_rate)
				enemy_count = enemy_count + 1
			else
				timer.cancel(handle)
			end
		end)
end

function create_enemy(self,position,difficulty, attack_rate)
	random_speed = difficulty * self.max_speed
	local id = factory.create("factory#enemy_factory",position,nil,{speed = random_speed,attack_rate = attack_rate});
	self.enemies[id] = {
		id = id
	}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("register_enemy_spawner") then
		table.insert(self.enemy_spawners, go.get_position(message.id))
		print("registered spawner")
	end
	if message_id == hash("kill_enemy") then
		self.enemies_count = self.enemies_count -1
	end
	
end